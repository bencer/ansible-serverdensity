---
- name: Getting EC2 facts (for EC2 cloud devices support)
  action: ec2_facts

- name: Add the Server Density repository signing key (Debian/Ubuntu)
  apt_key:
    id: "74371316"
    data: "{{ item }}"
  with_file: sd-packaging-public.key
  when: ansible_os_family == "Debian"

- name: Add Server Density repository (Debian/Ubuntu)
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items:
    - "deb https://archive.serverdensity.com/{{ ansible_lsb.id | lower }}/ all main"
  when: ansible_os_family == "Debian"

- name: Copy Server Density repository signing key (RedHat/CentOS)
  copy:
    src: sd-packaging-public.key
    dest: /etc/pki/rpm-gpg/RPM-GPG-KEY-serverdensity
    owner: root
    group: root
    mode: 0644
  when: ansible_os_family == "RedHat"

- name: Add the Server Density repository signing key (RedHat/CentOS)
  command: rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-serverdensity
  when: ansible_os_family == "RedHat"

- name: Add Server Density repository (RedHat/CentOS)
  copy:
    src: serverdensity.repo
    dest: /etc/yum.repos.d/serverdensity.repo
    owner: root
    group: root
    mode: 0644
  when: ansible_os_family == "RedHat"

- name: Install/Update Server Density agent (Debian/Ubuntu)
  apt:
    name: sd-agent
    state: latest
    update-cache: yes
    cache_valid_time: 86400
  notify: restart sd-agent
  when: ansible_os_family == "Debian"

- name: Install/Update Server Density agent (RedHat/CentOS)
  yum:
    name: sd-agent
    state: latest
  notify: restart sd-agent
  when: ansible_os_family == "RedHat"

- name: Create variable data directory
  file: path={{ var_dir_path }} state=directory owner=sd-agent group=sd-agent mode=0770

- name: Copy agentKey configuration script
  copy:
    src: sd_agent_key.py
    dest: "{{ var_dir_path }}/sd_agent_key.py"
    owner: root
    group: root
    mode: 0755

- name: Check if we previously upgraded the Server Density agent from v1 to v2
  stat:
    path: "{{ var_dir_path }}/sd-upgrade-v2-key.log.json"
  register: upgraded

- name: Register device with the Server Density API
  shell: "{{ var_dir_path }}/sd_agent_key.py \
         --name={{ sd_hostname | default(ansible_hostname) }} \
         --group={{ group_name }} > {{ var_dir_path }}/device.json"
  environment:
    SD_TOKEN: "{{ api_token }}"
  args:
    creates: "{{ var_dir_path }}/device.json"
  when: (not upgraded.stat.exists) and (ansible_ec2_instance_id is undefined) and (not existing_device_override)

- name: Get existing device with the Server Density API - EC2
  shell: "{{ var_dir_path }}/sd_agent_key.py \
         --name={{ sd_hostname | default(ansible_hostname) }} \
         --group={{ group_name }} \
         --ec2_instance_id={{ ansible_ec2_instance_id }} > {{ var_dir_path }}/device.json"
  environment:
    SD_TOKEN: "{{ api_token }}"
  args:
    creates: "{{ var_dir_path }}/device.json"
  when: (not upgraded.stat.exists) and (ansible_ec2_instance_id is defined)

- name: Get existing device with the Server Density API - trying to override
  shell: "{{ var_dir_path }}/sd_agent_key.py \
         --name={{ sd_hostname | default(ansible_hostname) }} \
         --group={{ group_name }} \
         --override > {{ var_dir_path }}/device.json"
  environment:
    SD_TOKEN: "{{ api_token }}"
  args:
    creates: "{{ var_dir_path }}/device.json"
  when: (not upgraded.stat.exists) and (ansible_ec2_instance_id is undefined) and existing_device_override

- name: Register JSON
  command: cat "{{ var_dir_path }}/device.json"
  register: result
  when: not upgraded.stat.exists

- name: Register JSON upgraded
  command: cat "{{ var_dir_path }}/sd-upgrade-v2-key.log.json"
  register: result_upgraded
  when: upgraded.stat.exists

- name: Set JSON to variable
  set_fact:
    api_result: "{{ result.stdout|from_json }}"
  when: not upgraded.stat.exists

- name: Set JSON to variable upgraded
  set_fact:
    api_result: "{{ result_upgraded.stdout|from_json }}"
  when: upgraded.stat.exists

# when this fails the device has been removed from Server Density
# delete /var/lib/sd-agent/device.json and re-run Ansible again
- name: Check agentKey is valid
  shell: "{{ var_dir_path }}/sd_agent_key.py \
         --check={{ api_result.agentKey }}"
  environment:
    SD_TOKEN: "{{ api_token }}"
  register: check_result
  failed_when: "check_result.rc != 0"
  when: check_agentkey
